@model MainApp.ViewModels.CreateTransferViewModel

@{
    ViewBag.Title = "Создание перевода";
}

<h2>Создать перевод</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="form-group">
            @Html.LabelFor(model => model.AccountFrom, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.AccountFrom, null, "Выберите счет", new { @class = "form-control AccountFrom", @required = "required" })
                @Html.ValidationMessageFor(model => model.AccountFrom, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AccountTo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AccountTo, new { htmlAttributes = new { @class = "form-control AccountTo", @required = "required" } })
                @Html.ValidationMessageFor(model => model.AccountTo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TransferSum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TransferSum, new { htmlAttributes = new { @class = "form-control TransferSum" } })
                @Html.ValidationMessageFor(model => model.TransferSum, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TransferComission, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TransferComission, new { htmlAttributes = new { @class = "form-control TransferComission", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.TransferComission, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" onclick="createTransfer()" value="Создать перевод" disabled="disabled" class="btn btn-success create-transfer-btn" />
            </div>
            <div class="col-md-offset-2 col-md-10">
                <input type="button" onclick="GetComission()" value="Рачитать комиссию" class="btn btn-info get-comission-btn" />
            </div>
        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    function alertError(data) {
        alert(data.Message);
    }
    var accountFrom = '';
    var accountTo = '';
    var transferSum = '';
    var comission = '';
    const accountFromElement = document.querySelector('.AccountFrom');
    accountFromElement.addEventListener('change', (event) => {
        accountFrom = event.target.value;
    });
    const accountToElement = document.querySelector('.AccountTo');
    accountToElement.addEventListener('change', (event) => {
        accountTo = event.target.value;
    });

    const transferSumElement = document.querySelector('.TransferSum');
    transferSumElement.addEventListener('change', (event) => {
        transferSum = event.target.value;
    });

    const transferCommElement = document.querySelector('.TransferSum');
    transferSumElement.addEventListener('change', (event) => {
        comission = event.target.value;
    });

    function createTransfer() {
        if (accountFrom === '') {
            alert("Пожалуйста выберите счет");
            return
        }
        if (accountTo === '') {
            alert("Пожалуйста напишите счет для отправки");
            return
        }
        if (transferSum === '') {
            alert("Пожалуйста введите сумму");
            return
        }
        $.ajax({
            url: '@Url.Action("CreateTransfer","Transfer")' + '?AccountFrom=' + accountFrom + '&AccountTo=' + accountTo + '&TransferSum=' + transferSum,
            contentType: 'applicaton/json',
            type: 'POST',
            success: function (data) {
                create(data);
            },
            error: function (error) {
                alertError(data);
            }
        })
    }

    function create(data) {
        if (data.StatusCode == 200) {
            alert(data.Message);
            setTimeout(function () {
                window.location.href = "/Transfer/Index/?userName=@User.Identity.Name";
            }, 1000);
        } else if (data.StatusCode != 200) {
            alertError(data);
        }
    }

    function GetComission() {
        $.ajax({
            url: '@Url.Action("GetComission","Transfer")' + '?TransferSum=' + transferSum,
            contentType: 'applicaton/json',
            type: 'POST',
            success: function(data) {
                SetCommission(transferSum, data);
                isActiveButton();
            },
            error: function(data) {
                alertError(data);
            }
        });
    }

    function SetCommission(trSum, Comm) {
        $('input[name=TransferSum]').val(parseFloat(trSum) + parseFloat(Comm));
        $('input[name=TransferComission]').val(Comm);
    }

    function isActiveButton() {
        setTimeout(function () {
            $('.create-transfer-btn').attr('disabled', false);
        }, 1000);
    }


</script>